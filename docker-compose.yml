services:
  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy

  producer:
    build:
      context: .
      dockerfile: producer.Dockerfile
    container_name: producer
    env_file:
      - ./.env.test
    depends_on:
      create-topic:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy

  consumer:
    build:
      context: .
      dockerfile: consumer.Dockerfile
    container_name: consumer
    env_file:
      - ./.env.test
    depends_on:
      create-topic:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy

  create-topic:
    image: bitnami/kafka:4.0.0
    container_name: create-topic
    env_file:
      - ./.env.test
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic $${KAFKA_TOPIC} --partitions 1 --replication-factor 1 && echo 'Topic created'"
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  kafka_data: 